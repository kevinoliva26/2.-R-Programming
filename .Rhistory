dataset_url <- "http://s3.amazonaws.com/practice_assignment/diet_data.zip"
download.file(dataset_url, "diet_data.zip")
unzip("diet_data.zip", exdir = "diet_data")
unzip("diet_data.zip", exdir = "/Data/diet_data")
dataset_url <- "http://s3.amazonaws.com/practice_assignment/diet_data.zip"
download.file(dataset_url, "diet_data.zip")
unzip("diet_data.zip", exdir = "/Data/diet_data")
list.files("diet_data")
#Descargar data y extraerla en el wd()
dataset_url <- "http://s3.amazonaws.com/practice_assignment/diet_data.zip"
download.file(dataset_url, "diet_data.zip")
unzip("diet_data.zip", exdir = "diet_data")
#Enlistar los archivos del directorio
list.files("diet_data")
andy <- read.csv("diet_data/Andy.csv")
head(andy)
andy <- read.csv("diet_data/Andy.csv")
head(andy)
length(andy$Day)
dim(Andy)
dim(andy)
str(andy)
str(andy)
summary(andy)
names(andy)
andy[1, "Weight"]
andy[1:5, "Weight"]
andy[c(1,15,30), "Weight"]
#Peso de Andy primer, medio y ultimodia
andy[c(1,15,30), ]
#Otra manera de hacer el subset
andy[which(andy$Day == 30), "Weight"]
andy[which(andy[,"Day"] == 30), "Weight"]
subset(andy$Weight, andy$Day==30)
#asignando valores
andy_start <- andy[1, "Weight"]
andy_end <- andy[30, "Weight"]
andy_loss <- andy_start - andy_end
?list.files
andy_loss <- andy_start -
files <- list.files("diet_data")
andy_loss <- andy_start -
files <- list.files("diet_data")
andy_loss <- andy_start - andy_end
andly_loss
andy_loss
files <- list.files("diet_data")
files
files[3:5]
#Revisando el archivo de John
head(read.csv(files[3]))
#guardando los archivos en una lista que luego seran leidos
files <- list.files("diet_data")
files[1]
files[3:5]
#Revisando el archivo de John
head(read.csv(files[3]))
read.csv(files[1])
read.csv("John.csv")
files_full <- list.files("diet_data", full.names=TRUE)
files_full
read.csv(files_full[1])
full_data <- c()
for (i in length(files)){
full_data <- c(full_data,read.csv(files[_fulli]))
}
for (i in length(files)){
full_data <- c(full_data,read.csv(files_full[i]))
}
full_data
full_data$Patient.Name["John"]
for (i in length(files)){
read_data <- read.csv(files_full[i]))
full_data <- rbind(full_data,read_data)
}
full_data <- c()
for (i in length(files)){
read_data <- read.csv(files_full[i])
full_data <- rbind(full_data,read_data)
}
full_data <- c()
for (i in length(files_full)){
read_data <- read.csv(files_full[i])
full_data <- rbind(full_data,read_data)
}
length(files_full)
files_full[2]
read.csv(files_full[1])
read.csv(files_full[5])
for (i in length(files_full)){
read_data <- read.csv(files_full[i])
full_data <- rbind(full_data,read_data)
}
full_data <- c()
for (i in length(files_full)){
read_data <- read.csv(files_full[i])
full_data <- rbind(full_data,read_data)
}
head(read.csv(files_full[3]))
#Para juntar el data set se hace un rbin
andy_david <- rbind(andy, read.csv(files_full[2]))
andy_david
head(andy_david)
tail(andy_david)
full_data <- c()
for (i in length(files_full)){
read_data <- read.csv(files_full[i])
full_data <- rbind(read_data,full_data)
}
#Consolidando todos los csv en uno solo
full_data <- data.frame()
for (i in length(files_full)){
read_data <- read.csv(files_full[i])
full_data <- rbind(read_data,full_data)
}
#Subset del dia 25
day_25 <- andy_david[which(andy_david$Day == 25), ]
andy_david$Day==25
andy_david[andy_david$Day==25]
andy_david[(andy_david$Day==25),]
day25
day_25
andy_david[(andy_david$Day==25),]
for (i in 1:5) {print(i)}
#Leyendo todos los csv
for (i in 1:5) {
dat <- rbind(dat, read.csv(files_full[i]))
}
#Leyendo todos los csv
dat <- data.frame()
for (i in 1:5) {
dat <- rbind(dat, read.csv(files_full[i]))
}
str(dat)
levels(dat$Patient.Name)
#Para saber la media
median(dat$Weight, na.rm=TRUE)
#Saber la mediana del dia 30
dat_30 <- dat[which(dat[, "Day"] == 30),]
dat_30
median(dat_30$Weight)
dat[dat$Day==30,]
median(dat[dat$Day==30,"weight"]
median(dat[dat$Day==30,"weight"]
median(dat[dat$Day==30,"weight"])
median(dat_30$Weight)
median(dat[dat$Day==30,"weight"],na.rm = TRUE)
dat[dat$Day==30,]
dat[dat$Day==30,"weight"]
dat[weight,dat$Day==30]
dat[[weight,dat$Day==30].]
dat[which(dat[, "Day"] == 30),]
median(dat[which(dat[, "Day"] == 30),]$Weight)
median(dat_30$Weight)
weightmedian <- function(directory,day){
dat <- data.frame()
files_full <- list.files(directory, full.names=TRUE)
for (i in 1:5){
dat <- rbind(dat, read.csv(files_full[i]))
dat_median <- median(dat[which(dat[, "Day"] == day),]$Weight)
}
}
weightmedian("diet_data",1)
weightmedian <- function(directory,day){
dat <- data.frame()
files_full <- list.files(directory, full.names=TRUE)
for (i in 1:5){
dat <- rbind(dat, read.csv(files_full[i]))
dat_median <- median(dat[which(dat[, "Day"] == day),]$Weight)
}
dat_median
}
weightmedian("diet_data",1)
weightmedian("diet_data",1:5)
weightmedian("diet_data",1:20)
weightmedian("diet_data",7)
weightmedian <- function(directory,day){
dat <- data.frame()
files_full <- list.files(directory, full.names=TRUE)
for (i in 1:5){
dat <- rbind(dat, read.csv(files_full[i]))
dat_median <- median(dat[which(dat[, "Day"] == day),]$Weight,na.rm = TRUE)
}
dat_median
}
weightmedian("diet_data",7)
weightmedian("diet_data",1:7)
#Otra manera de cargar csv mas optima
summary(files_full)
tmp <- vector(mode = "list", length = length(files_full))
tmp <- vector(mode = "list", length = length(files_full))
summary(tmp)
summary(tmp)
#leyendo los archivos y agregandolos a tmp
for (i in seq_along(files_full)) {
tmp[[i]] <- read.csv(files_full[[i]])
}
str(tmp)
#Se puede hacer lo mismo utilizando lapply
str(lapply(files_full, read.csv))
str(tmp[[1]])
head(tmp[[1]][,"Day"])
str(output)
#Para pasar estas listas a un data frame se usa do.call()
#lets you specify a function and then passes a list as if each element of the list were an argument to the function
#The syntax is `do.call(function_you_want_to_use, list_of_arguments)
output <- do.call(rbind, tmp)
str(output)
lapply(x,mean)
x <- list(a=1:4,b=rnorm(10),c=rnorm(20,1),d=rnorm(100,5))
x <- list(a=1:4,b=rnorm(10),c=rnorm(20,1),d=rnorm(100,5))
lapply(x,mean)
x<- 1:4
lapply(x,runif)
x<- 1:4
lapply(x,runif,min=0,max=0)
x<- 1:4
lapply(x,runif,min=0,max=10)
x <- list(a=1:4,b=rnorm(10),c=rnorm(20,1),d=rnorm(100,5))
sapply(x,mean)
x <- matrix(rnorm(200),20,10)
apply(x,2,mean)
apply(x,1,sum)
apply(x,2,mean)
apply(x,1,sum)
apply(x,2,mean)
apply(x,1,sum)
x <- matrix(rnorm(200),20,10)
apply(x,2,mean)
apply(x,1,sum)
x <- matrix(rnorm(200),20, 10)
apply(x, 1, quantile, probs = c(0.25,0.75))
mapply(rep,1:4,4:1)
x<- c(rnorm(10),runif(10),rnorm(10,1))
x
f <- gl(3,10)
f <- gl(3,10)
f
tapply(x, f, mean)
f <- gl(3,8)
x<- c(rnorm(10),runif(10),rnorm(10,1))
f <- gl(3,8)
f
tapply(x, f, mean)
x<- c(rnorm(10),runif(10),rnorm(10,1))
f <- gl(3,10)
f
tapply(x, f, mean)
x<- c(rnorm(10),runif(10),rnorm(10,1), simplify = FALSE)
f <- gl(3,10)
f
tapply(x, f, mean)
x<- c(rnorm(10),runif(10),rnorm(10,1))
f <- gl(3,10)
f
tapply(x, f, mean,simplify = FALSE)
rnorm(4)
mean(rnorm(5))
rnorm(4,1)
mean(rnorm(5,1))
x <- c(rnorm(5),runif(5))
f <- gl(2,5)
split(x,f)
x <- c(rnorm(5),runif(5))
x
f <- gl(2,5)
split(x,f)
str(split(x,f))
library(datasets)
head(ariquality)
library(datasets)
head(ariquality)
library(datasets)
head(airquality)
s <- split(airquality, airqualitiy$Month)
library(datasets)
s <- split(airquality, airqualitiy$Month)
s <- split(airquality, airquality$Month)
library(datasets)
s <- split(airquality, airquality$Month)
lapply(s, funcion(x) colMeans(x[,c("Ozone","Solar.R","Wind")]))
library(datasets)
s <- split(airquality, airquality$Month)
lapply(s, funcion(x) colMeans(x[,c("Ozone","Solar.R","Wind")])
library(datasets)
s <- split(airquality, airquality$Month)
lapply(s, funcion(x) colMeans(x[,c("Ozone","Solar.R","Wind")]))
library(datasets)
s <- split(airquality, airquality$Month)
lapply(s, function(x) colMeans(x[,c("Ozone","Solar.R","Wind")]))
sapply(s, function(x) colMeans(x,[,c("Ozone","Solar.R","Wind"]))
sapply(s, function(x) colMeans(x,[,c("Ozone","Solar.R","Wind"]))
sapply(s, function(x) colMeans(x[,c("Ozone","Solar.R","Wind"]))
sapply(s, function(x) colMeans(x[,c("Ozone","Solar.R","Wind")]))
sapply(s, function(x) colMeans(x[c("Ozone","Solar.R","Wind"),]))
sapply(s, function(x) colMeans(x[,c("Ozone","Solar.R","Wind")]))
sapply(s, function(x) colMeans(x["5",c("Ozone","Solar.R","Wind")]))
sapply(s, function(x) colMeans(x["6",c("Ozone","Solar.R","Wind")]))
sapply(s, function(x) colMeans(x[6,c("Ozone","Solar.R","Wind")]))
sapply(s, function(x) colMeans(x[,c("Ozone","Solar.R","Wind")]))
sapply(s, function(x) colMeans(x[,c("Ozone","Solar.R","Wind")]))
sapply(s, function(x) colMeans(x[,c("Ozone","Solar.R","Wind")]),na.rm=TRUE)
sapply(s, function(x) colMeans(x[,c("Ozone","Solar.R","Wind")]))
sapply(s, function(x) colMeans(x[,c("Ozone","Solar.R","Wind")],na.rm=TRUE))

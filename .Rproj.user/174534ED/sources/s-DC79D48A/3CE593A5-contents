---
title: "Week 2"
author: "kevinoliva26"
date: "6/29/2020"
output: html_document
---

## Week 2

### if condition

if (condicion) {
    do
} else {
    do
}

### for loop
for (i in 1:10) {
    do
}

for (i in seq_along(x)) {
    do
}

for (letter in x) {
    do
}

for (i in 1:10) do

Puede estar "nested"
```{r}
x<- matrix(1:6,2,3)
for(i in seq_len(nrow(x))){
  for(j in seq_len(ncol(x))){
    print(x[i,j])
  }
}
```

### while loop
count <- 0
while(count < 10) {
    do
    count <- count + 1
}

### repeat
Inicia un loop infitinio. Necesito llamar un break para que pare
Next es usado para saltar una iteracion en un loop

### Writing functions
f <- function(<arguments>){
    do
}

Se puede poner default values a un argumento de la funcion.

```{r}
add2 <- function(x,y){
  x+y
}
```

```{r}
#Devuelve los promedios por columna y remueve los NA
columnmean <- function(y, removeNA = TRUE){
  nc <- ncol(y)
  means <- numeric(nc)
  for(i in 1:nc){
    means[1] <- mean(y[,i], na.rm = removeNA)
  }
  means
}
```

###The "..." Argument
Indicates a variable number of arguments that are usually passed on to other function
... is used when another function you don't want to copy the entire argument list of the original function

```{r}
myplot <- function(x,t,type="1",...){
  plot(x,y, type = type,...)
}
```

Es necesario cuando el numero de  argumentos pasados a una funcion no se sabe por adelantado

If any argument appears after ... on the argument list, they must be name explicitly and cannot be partially matched

###Scoping Rules
the values of free variables are searched for in the enviroment in which the funciton was defined
Por ejemplo que en una funcion puede haber una variable que no esta definida en los argumentos, entonces R busca esa variable del enviroment.

f <- function(x,y){
  x + y + z   ##R busca z en el enviroment, si no lo encuentra, busca en el parent enviroment } 
z es una free variable

###Exploring a function closure
Se utiliza la funcion ls(enviroment()) para ver las funciones dentro de un enviroment
get("nombre de variable",enviroment()) para ver el valor de esa variable en el enviroment

###Dates and Times in R
Dates are stored internally as the numbers of days since 1/ene/1970
as.Date para guardar como una fecha

weekdays() dia de la semana
months() nombre del mes
quarter() cuarto del mes

```{r}
datestring <- c("January 10, 2012 10:40","December 9, 2011 9:10")
x <- strptime(datestring,"%B %d, %Y %H:%M") # para cambiar a formato deseado
x
```

Se puede convertir a fecha con
x <- as.POSIXlt(x) -- para fechas
x <- as.POSIXct(x) -- para horas
Asi ya se pueden hacer operaciones con los dias, zonas horarias, etc. 


